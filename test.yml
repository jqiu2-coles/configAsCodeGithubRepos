trigger: none

parameters:
  - name: REPO_OWNER_REPO_NAME
    type: string
    default: "Coles-Store-Team-Platform/kleene-cli"

jobs:
  - job: Container
    pool: 'Coles-Private-Hosted-Store-Team-NonProd-Scalable'
    #container: cached-images.azr.cmltd.net.au/powershell-pipeline:latest
    steps:
      - checkout: self
        fetchDepth: 1
        persistCredentials: true

      - task: Bash@3
        displayName: Generate repo's branch protection rules json files 
        #condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        env:
          GITHUB_PAT: $(GITHUB_PAT)
        inputs:
          targetType: 'inline'
          script: |
            # get repo owner name and repo name
            IFS=/
            REPO_OWNER_REPO_NAME=${{ parameters.REPO_OWNER_REPO_NAME }}
            set $REPO_OWNER_REPO_NAME
            REPO_OWNER=$1
            REPO_NAME=$2
            unset IFS
            
            # list all branches for the repo
            mapfile -t branches_array < <(
                page=1
                while branch=$(curl -s -H "Authorization: Bearer $(GITHUB_PAT)" -H "X-GitHub-Api-Version: 2022-11-28" "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/branches?per_page=100&page=$page" | jq -r '.[].name' 2>/dev/null) && [ -n "$branch" ]; do 
                    echo "$branch"
                    page=$((page+1))
                done | sort -u
            )
            echo "all branches:"
            printf '%s\n' "${branches_array[@]}"
            
            
            for branch_name in "${branches_array[@]}"; do
              encoded_branch=$(printf %s ${branch_name} | jq -sRr @uri)
              echo "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/branches/${encoded_branch}/protection"
              # get branch protection rules json
              # save the result to json file if it's valid
              response=$(curl -L \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $(GITHUB_PAT)" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/branches/${encoded_branch}/protection)

              # check if the result contains error
              status=$(echo "$response" | jq -r '.status // empty')
              if [[ -n "$status" && ! "$status" =~ ^2 ]]; then
                echo "ignore result due toï¼šstatus = $status"
              else
                echo "$response" > ${REPO_OWNER}_${REPO_NAME}_${encoded_branch}.json
                echo "saved result to ${REPO_OWNER}_${REPO_NAME}_${encoded_branch}.json"
              fi
            done

      - task: Bash@3
        displayName: upload json files to Github repo
        env:
          GITHUB_PAT: $(GITHUB_PAT)
        inputs:
          targetType: 'inline'
          script: |
            ls
            git config --global user.name "$(GITHUB_USERNAME)"
            git config --global user.email "$(GITHUB_EMAIL)"
            CURRENT_URL=$(git remote get-url origin)
            echo "Current Remote URL: $CURRENT_URL"
            REPO_PATH=$(echo "$CURRENT_URL" | sed -E 's|.*[:/]([^/]+/[^/]+)(\.git)?/?$|\1|')
            echo "Repository Path: $REPO_PATH"
            REMOTE_URL="https://$(GITHUB_PAT)@github.com/$REPO_PATH.git"
            git remote set-url origin "$REMOTE_URL"
            git fetch origin
            git checkout main
            git pull
            git add .
            git commit -m 'repo updated with the latest branch protection rules'
            git push